name: Prod Deployment

on:
  push:
    branches: ["prod"]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: APPO_API
  APP_NAME: appo

jobs:
  linter:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install

      - name: Run linters
        run: |
          poetry run pre-commit run --all-files

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: linter

    steps:
      # 1. 리포지토리 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:latest .

      # 4. Docker 이미지 푸시
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:latest

      # 5. SSH를 통해 EC2에서 배포 작업 수행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/appo-backend
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:latest
            docker compose stop api
            docker compose up api -d
            docker image prune -f
